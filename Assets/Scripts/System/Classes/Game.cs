using UnityEngine;
using System.IO;
using System.Collections;
using SimpleJSON;

[System.Serializable]
public class Game
{
    public DirectoryInfo directory;

    public string name;
    private string author;
    public string Author
    {
        get
        {
            return this.author == null ? "" : this.author;
        }
        set
        {
            this.author = value;
        }
    }
    private string description;
    public string Description
    {
        get
        {
            return this.description == null ? "" : this.description;
        }
        set
        {
            this.description = value;
        }
    }

    public Sprite screenshot;
    public string executable;
    public string slug;

    public enum GameType { EXE, PICO8, CUSTOM, LEGACY, FLASH }
    public GameType gameType;

    public bool voidGame = false;

    public JSONNode savedMetadata;

    /// <summary>
    /// The game only takes in a directory handed down by the Playlist class, it then finds all the relevant information for the Game
    /// </summary>
    /// <param name="directory">The directory path.</param>
    public Game(string directory) {
        this.directory = new DirectoryInfo(directory);

        //Check for the Winnitron Metadata JSON, and use oldschool folder naming if it doesn't exist
        string metadata = Path.Combine(this.directory.FullName, "winnitron_metadata.json");
        if (System.IO.File.Exists(metadata)) {
            BuildGameJSON();
        } else {
            BuildGame();
        }

        AhkBuilder ahk = new AhkBuilder(this);
        ahk.compile();
        ahk.write();
    }

    /// <summary>
    /// Builds a game from scratch using only what it can find in the directory.
    /// </summary>
    private void BuildGame() {
        GM.Instance.logger.Warn("GAME: No JSON!  Determining game...");

        if (DetermineGameType()) {
            this.name = GetGameNameFromFolderName();
            this.screenshot = GetScreenshot();
        } else {
            GM.Instance.logger.Error("GAME: Could not determine game type.  Voiding game " + directory);
            voidGame = true;
        }
    }

    /// <summary>
    /// Builds a game using metadata information found in a JSON file generated by Winnitron Network or manually.
    /// </summary>
    private void BuildGameJSON() {
        savedMetadata = GM.Instance.data.LoadJson(Path.Combine(directory.FullName, "winnitron_metadata.json"));

        this.name = savedMetadata["title"].Value;
        this.author = null; //No author stuff just yet
        this.screenshot = GetScreenshot();
        this.executable = Path.Combine(directory.FullName, savedMetadata["executable"]);
        this.slug = savedMetadata["slug"];
        if (slug == null) {
            GM.Instance.logger.Warn("Missing slug attribute in " + name + " winnitron_metadata.json. Using '" + directory.Name + "'.");
            this.slug = directory.Name;
        }

        switch(savedMetadata["keys"]["template"].Value.ToLower()) {
            case "default":
                gameType = GameType.EXE;
                break;

            case "pico8":
                gameType = GameType.PICO8;
                break;

            case "flash":
                gameType = GameType.FLASH;
                break;

            case "legacy":
                gameType = GameType.LEGACY;
                break;

            case "custom":
                gameType = GameType.CUSTOM;
                break;

            default:
                DetermineGameType();
                break;
        }

        GM.Instance.logger.Info(null, "Game Built JSON! Name: " + name + " Screenshot: " + screenshot.name + " exe path: " + executable);
    }






    private Sprite GetScreenshot() {
        // Load the screenshot from the games directory as a Texture2D
        var screenshotTex = new Texture2D(1024, 768);

        string imageFile = pickImageFile();
        if (imageFile != null) {
            GM.Instance.logger.Info("GAME: Loading custom screenshot " + imageFile);
            screenshotTex.LoadImage(File.ReadAllBytes(imageFile));
        } else if (gameType == GameType.PICO8) {
            GM.Instance.logger.Info("GAME: Loading default PICO8 screenshot ");
            screenshotTex = Resources.Load<Texture2D>("default_images/pico8") as Texture2D;
        } else {
            GM.Instance.logger.Info("GAME: Loading default screenshot");
            screenshotTex = Resources.Load<Texture2D>("default_images/exe") as Texture2D;
        }

        // Turn the Texture2D into a sprite
        return Sprite.Create(screenshotTex, new Rect(0, 0, screenshotTex.width, screenshotTex.height), new Vector2(0.5f, 0.5f));
    }

    private string pickImageFile() {

        string specified = null;
        bool haveData = savedMetadata["image_url"] != null;
        string imageFilename;

        if (haveData) {
            try {
                System.Uri dlFrom = new System.Uri(savedMetadata["image_url"]);
                imageFilename = Path.GetFileName(dlFrom.AbsolutePath);
            } catch (System.UriFormatException) {
                imageFilename = Path.GetFullPath(savedMetadata["image_url"]);
            }

            specified = Path.Combine(directory.FullName, imageFilename);
        }

        string png = findFirstImage("png");
        string jpg = findFirstImage("jpg");

        if (haveData && File.Exists(specified)) {
            GM.Instance.logger.Debug("Using specified cover image: " + specified);
            return specified;
        } else if (png != null && File.Exists(png)) {
            GM.Instance.logger.Debug("Using found png file: " + png);
            return png;
        } else if (jpg != null && File.Exists(jpg)) {
            GM.Instance.logger.Debug("Using found jpg file: " + jpg);
            return jpg;
        } else {
            GM.Instance.logger.Debug("No cover image found in " + directory.FullName);
            return null;
        }
    }

    private string findFirstImage(string ext) {
        try {
            return Directory.GetFiles(directory.FullName, "*." + ext)[0];
        } catch (System.IndexOutOfRangeException) {
            return null;
        }
    }

    private string GetGameNameFromFolderName() {
        //Figure out the name of the game from the directory title
        var directoryName = directory.Name;

        //Replace the underscores and dashes with blank spaces
        var name = directoryName.Replace('_', ' ');
        name = name.Replace('-', ' ');

        return name;
    }

    /// <summary>
    /// Figures out what kind of game might be in the directory depending on the files inside.
    /// </summary>
    /// <returns>True if successful, false if unsuccessful in determining game type.</returns>
    private bool DetermineGameType() {
        if (Directory.GetFiles(this.directory.ToString(), "*.html").Length == 1)
        {
            executable = Directory.GetFiles(this.directory.ToString(), "*.html")[0];
            GM.Instance.logger.Info("Determined PICO8! " + executable);
            gameType = GameType.PICO8;
            return true;
        }
        else if (Directory.GetFiles(this.directory.ToString(), "*.exe").Length == 1)
        {
            GM.Instance.logger.Info("Determined EXE!");
            executable = Directory.GetFiles(this.directory.ToString(), "*.exe")[0];
            gameType = GameType.EXE;
            return true;
        }

        //Can't determine game type, voiding this game
        voidGame = true;
        return false;
    }

    /// <summary>
    /// Called by RUNNER script, in case the game needs to do some extra setup before it runs.
    /// </summary>
    public void PreRun() {
        if (gameType == GameType.PICO8)
        {
            string source = Path.Combine(directory.ToString(), "Pico8Launcher.js");
            string dest   = Path.Combine(GM.Instance.options.dataPath, "Options/Pico8/Pico8Launcher.js");

            GM.Instance.logger.Info("GAME: PreRun copying " + source + " to " + dest);
            File.Copy(source, dest, true);
        }
    }

    /// <summary>
    /// Writes the text to the filename in the Game directory.
    /// </summary>
    /// <param name="text">The text to encode into the file.</param>
    /// <param name="fileName">The name of the file.</param>
    public void WriteStringToFile(string text, string fileName) {
        string behaviour = GM.Instance.options.O["launcher"]["writeScripts"];
        if (behaviour == null)
            behaviour = "always"; // backwards-compatible default behavior

        string file = Path.Combine(directory.FullName, fileName);
        if (behaviour == "always") {
            GM.Instance.logger.Info("Overwriting launch script: " + file);
            File.Delete(file);
            File.WriteAllText(file, text);
        } else if (behaviour == "new") {
            if (File.Exists(file)) {
                GM.Instance.logger.Debug("Using existing launch script: " + file);
            } else {
                GM.Instance.logger.Info("Writing new launch script: " + file);
                File.WriteAllText(file, text);
            }
        } else if (behaviour == "never") {
            GM.Instance.logger.Debug("Skipping writing launch script: " + file);
            if (!File.Exists(file)) {
                GM.Instance.logger.Error("Game launch script does not exist and launcher.writeScripts option set to 'never': " + file);
            }
        }
    }
}
